// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userinfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userinfo_2eproto;
namespace userinfo {
class ReqUserinfo;
struct ReqUserinfoDefaultTypeInternal;
extern ReqUserinfoDefaultTypeInternal _ReqUserinfo_default_instance_;
class RespUserinfo;
struct RespUserinfoDefaultTypeInternal;
extern RespUserinfoDefaultTypeInternal _RespUserinfo_default_instance_;
}  // namespace userinfo
PROTOBUF_NAMESPACE_OPEN
template<> ::userinfo::ReqUserinfo* Arena::CreateMaybeMessage<::userinfo::ReqUserinfo>(Arena*);
template<> ::userinfo::RespUserinfo* Arena::CreateMaybeMessage<::userinfo::RespUserinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userinfo {

// ===================================================================

class ReqUserinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userinfo.ReqUserinfo) */ {
 public:
  inline ReqUserinfo() : ReqUserinfo(nullptr) {}
  ~ReqUserinfo() override;
  explicit PROTOBUF_CONSTEXPR ReqUserinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUserinfo(const ReqUserinfo& from);
  ReqUserinfo(ReqUserinfo&& from) noexcept
    : ReqUserinfo() {
    *this = ::std::move(from);
  }

  inline ReqUserinfo& operator=(const ReqUserinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUserinfo& operator=(ReqUserinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUserinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUserinfo* internal_default_instance() {
    return reinterpret_cast<const ReqUserinfo*>(
               &_ReqUserinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqUserinfo& a, ReqUserinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUserinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUserinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqUserinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqUserinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqUserinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqUserinfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUserinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userinfo.ReqUserinfo";
  }
  protected:
  explicit ReqUserinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTokenstrFieldNumber = 2,
    kExtrMessageFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tokenstr = 2;
  void clear_tokenstr();
  const std::string& tokenstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tokenstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tokenstr();
  PROTOBUF_NODISCARD std::string* release_tokenstr();
  void set_allocated_tokenstr(std::string* tokenstr);
  private:
  const std::string& _internal_tokenstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tokenstr(const std::string& value);
  std::string* _internal_mutable_tokenstr();
  public:

  // string extr_message = 3;
  void clear_extr_message();
  const std::string& extr_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extr_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extr_message();
  PROTOBUF_NODISCARD std::string* release_extr_message();
  void set_allocated_extr_message(std::string* extr_message);
  private:
  const std::string& _internal_extr_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extr_message(const std::string& value);
  std::string* _internal_mutable_extr_message();
  public:

  // @@protoc_insertion_point(class_scope:userinfo.ReqUserinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokenstr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extr_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userinfo_2eproto;
};
// -------------------------------------------------------------------

class RespUserinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userinfo.RespUserinfo) */ {
 public:
  inline RespUserinfo() : RespUserinfo(nullptr) {}
  ~RespUserinfo() override;
  explicit PROTOBUF_CONSTEXPR RespUserinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespUserinfo(const RespUserinfo& from);
  RespUserinfo(RespUserinfo&& from) noexcept
    : RespUserinfo() {
    *this = ::std::move(from);
  }

  inline RespUserinfo& operator=(const RespUserinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespUserinfo& operator=(RespUserinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespUserinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespUserinfo* internal_default_instance() {
    return reinterpret_cast<const RespUserinfo*>(
               &_RespUserinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RespUserinfo& a, RespUserinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RespUserinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespUserinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespUserinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespUserinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespUserinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RespUserinfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespUserinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userinfo.RespUserinfo";
  }
  protected:
  explicit RespUserinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kExtrMessageFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string extr_message = 3;
  void clear_extr_message();
  const std::string& extr_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extr_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extr_message();
  PROTOBUF_NODISCARD std::string* release_extr_message();
  void set_allocated_extr_message(std::string* extr_message);
  private:
  const std::string& _internal_extr_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extr_message(const std::string& value);
  std::string* _internal_mutable_extr_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:userinfo.RespUserinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extr_message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqUserinfo

// string name = 1;
inline void ReqUserinfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqUserinfo::name() const {
  // @@protoc_insertion_point(field_get:userinfo.ReqUserinfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUserinfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userinfo.ReqUserinfo.name)
}
inline std::string* ReqUserinfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:userinfo.ReqUserinfo.name)
  return _s;
}
inline const std::string& ReqUserinfo::_internal_name() const {
  return name_.Get();
}
inline void ReqUserinfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqUserinfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqUserinfo::release_name() {
  // @@protoc_insertion_point(field_release:userinfo.ReqUserinfo.name)
  return name_.Release();
}
inline void ReqUserinfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userinfo.ReqUserinfo.name)
}

// string tokenstr = 2;
inline void ReqUserinfo::clear_tokenstr() {
  tokenstr_.ClearToEmpty();
}
inline const std::string& ReqUserinfo::tokenstr() const {
  // @@protoc_insertion_point(field_get:userinfo.ReqUserinfo.tokenstr)
  return _internal_tokenstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUserinfo::set_tokenstr(ArgT0&& arg0, ArgT... args) {
 
 tokenstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userinfo.ReqUserinfo.tokenstr)
}
inline std::string* ReqUserinfo::mutable_tokenstr() {
  std::string* _s = _internal_mutable_tokenstr();
  // @@protoc_insertion_point(field_mutable:userinfo.ReqUserinfo.tokenstr)
  return _s;
}
inline const std::string& ReqUserinfo::_internal_tokenstr() const {
  return tokenstr_.Get();
}
inline void ReqUserinfo::_internal_set_tokenstr(const std::string& value) {
  
  tokenstr_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqUserinfo::_internal_mutable_tokenstr() {
  
  return tokenstr_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqUserinfo::release_tokenstr() {
  // @@protoc_insertion_point(field_release:userinfo.ReqUserinfo.tokenstr)
  return tokenstr_.Release();
}
inline void ReqUserinfo::set_allocated_tokenstr(std::string* tokenstr) {
  if (tokenstr != nullptr) {
    
  } else {
    
  }
  tokenstr_.SetAllocated(tokenstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tokenstr_.IsDefault()) {
    tokenstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userinfo.ReqUserinfo.tokenstr)
}

// string extr_message = 3;
inline void ReqUserinfo::clear_extr_message() {
  extr_message_.ClearToEmpty();
}
inline const std::string& ReqUserinfo::extr_message() const {
  // @@protoc_insertion_point(field_get:userinfo.ReqUserinfo.extr_message)
  return _internal_extr_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUserinfo::set_extr_message(ArgT0&& arg0, ArgT... args) {
 
 extr_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userinfo.ReqUserinfo.extr_message)
}
inline std::string* ReqUserinfo::mutable_extr_message() {
  std::string* _s = _internal_mutable_extr_message();
  // @@protoc_insertion_point(field_mutable:userinfo.ReqUserinfo.extr_message)
  return _s;
}
inline const std::string& ReqUserinfo::_internal_extr_message() const {
  return extr_message_.Get();
}
inline void ReqUserinfo::_internal_set_extr_message(const std::string& value) {
  
  extr_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqUserinfo::_internal_mutable_extr_message() {
  
  return extr_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqUserinfo::release_extr_message() {
  // @@protoc_insertion_point(field_release:userinfo.ReqUserinfo.extr_message)
  return extr_message_.Release();
}
inline void ReqUserinfo::set_allocated_extr_message(std::string* extr_message) {
  if (extr_message != nullptr) {
    
  } else {
    
  }
  extr_message_.SetAllocated(extr_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extr_message_.IsDefault()) {
    extr_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userinfo.ReqUserinfo.extr_message)
}

// -------------------------------------------------------------------

// RespUserinfo

// int32 code = 1;
inline void RespUserinfo::clear_code() {
  code_ = 0;
}
inline int32_t RespUserinfo::_internal_code() const {
  return code_;
}
inline int32_t RespUserinfo::code() const {
  // @@protoc_insertion_point(field_get:userinfo.RespUserinfo.code)
  return _internal_code();
}
inline void RespUserinfo::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void RespUserinfo::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:userinfo.RespUserinfo.code)
}

// string message = 2;
inline void RespUserinfo::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& RespUserinfo::message() const {
  // @@protoc_insertion_point(field_get:userinfo.RespUserinfo.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespUserinfo::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userinfo.RespUserinfo.message)
}
inline std::string* RespUserinfo::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:userinfo.RespUserinfo.message)
  return _s;
}
inline const std::string& RespUserinfo::_internal_message() const {
  return message_.Get();
}
inline void RespUserinfo::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* RespUserinfo::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* RespUserinfo::release_message() {
  // @@protoc_insertion_point(field_release:userinfo.RespUserinfo.message)
  return message_.Release();
}
inline void RespUserinfo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userinfo.RespUserinfo.message)
}

// string extr_message = 3;
inline void RespUserinfo::clear_extr_message() {
  extr_message_.ClearToEmpty();
}
inline const std::string& RespUserinfo::extr_message() const {
  // @@protoc_insertion_point(field_get:userinfo.RespUserinfo.extr_message)
  return _internal_extr_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespUserinfo::set_extr_message(ArgT0&& arg0, ArgT... args) {
 
 extr_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userinfo.RespUserinfo.extr_message)
}
inline std::string* RespUserinfo::mutable_extr_message() {
  std::string* _s = _internal_mutable_extr_message();
  // @@protoc_insertion_point(field_mutable:userinfo.RespUserinfo.extr_message)
  return _s;
}
inline const std::string& RespUserinfo::_internal_extr_message() const {
  return extr_message_.Get();
}
inline void RespUserinfo::_internal_set_extr_message(const std::string& value) {
  
  extr_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RespUserinfo::_internal_mutable_extr_message() {
  
  return extr_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RespUserinfo::release_extr_message() {
  // @@protoc_insertion_point(field_release:userinfo.RespUserinfo.extr_message)
  return extr_message_.Release();
}
inline void RespUserinfo::set_allocated_extr_message(std::string* extr_message) {
  if (extr_message != nullptr) {
    
  } else {
    
  }
  extr_message_.SetAllocated(extr_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extr_message_.IsDefault()) {
    extr_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userinfo.RespUserinfo.extr_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userinfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userinfo_2eproto
