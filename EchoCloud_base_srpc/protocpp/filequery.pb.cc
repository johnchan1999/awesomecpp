// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filequery.proto

#include "filequery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace filequery {
PROTOBUF_CONSTEXPR ReqFilequery::ReqFilequery(
    ::_pbi::ConstantInitialized)
  : username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tokenstr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extr_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extr_int_(0){}
struct ReqFilequeryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqFilequeryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqFilequeryDefaultTypeInternal() {}
  union {
    ReqFilequery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqFilequeryDefaultTypeInternal _ReqFilequery_default_instance_;
PROTOBUF_CONSTEXPR RespFilequery::RespFilequery(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extr_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , code_(0){}
struct RespFilequeryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RespFilequeryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RespFilequeryDefaultTypeInternal() {}
  union {
    RespFilequery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RespFilequeryDefaultTypeInternal _RespFilequery_default_instance_;
}  // namespace filequery
static ::_pb::Metadata file_level_metadata_filequery_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_filequery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_filequery_2eproto = nullptr;

const uint32_t TableStruct_filequery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filequery::ReqFilequery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::filequery::ReqFilequery, username_),
  PROTOBUF_FIELD_OFFSET(::filequery::ReqFilequery, tokenstr_),
  PROTOBUF_FIELD_OFFSET(::filequery::ReqFilequery, extr_message_),
  PROTOBUF_FIELD_OFFSET(::filequery::ReqFilequery, extr_int_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filequery::RespFilequery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::filequery::RespFilequery, code_),
  PROTOBUF_FIELD_OFFSET(::filequery::RespFilequery, message_),
  PROTOBUF_FIELD_OFFSET(::filequery::RespFilequery, extr_message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::filequery::ReqFilequery)},
  { 10, -1, -1, sizeof(::filequery::RespFilequery)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::filequery::_ReqFilequery_default_instance_._instance,
  &::filequery::_RespFilequery_default_instance_._instance,
};

const char descriptor_table_protodef_filequery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017filequery.proto\022\tfilequery\"Z\n\014ReqFileq"
  "uery\022\020\n\010username\030\001 \001(\t\022\020\n\010tokenstr\030\002 \001(\t"
  "\022\024\n\014extr_message\030\003 \001(\t\022\020\n\010extr_int\030\004 \001(\005"
  "\"D\n\rRespFilequery\022\014\n\004code\030\001 \001(\005\022\017\n\007messa"
  "ge\030\002 \001(\t\022\024\n\014extr_message\030\003 \001(\t2T\n\020filequ"
  "eryService\022@\n\tFilequery\022\027.filequery.ReqF"
  "ilequery\032\030.filequery.RespFilequery\"\000b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_filequery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_filequery_2eproto = {
    false, false, 284, descriptor_table_protodef_filequery_2eproto,
    "filequery.proto",
    &descriptor_table_filequery_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_filequery_2eproto::offsets,
    file_level_metadata_filequery_2eproto, file_level_enum_descriptors_filequery_2eproto,
    file_level_service_descriptors_filequery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_filequery_2eproto_getter() {
  return &descriptor_table_filequery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_filequery_2eproto(&descriptor_table_filequery_2eproto);
namespace filequery {

// ===================================================================

class ReqFilequery::_Internal {
 public:
};

ReqFilequery::ReqFilequery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:filequery.ReqFilequery)
}
ReqFilequery::ReqFilequery(const ReqFilequery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  tokenstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tokenstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokenstr().empty()) {
    tokenstr_.Set(from._internal_tokenstr(), 
      GetArenaForAllocation());
  }
  extr_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extr_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extr_message().empty()) {
    extr_message_.Set(from._internal_extr_message(), 
      GetArenaForAllocation());
  }
  extr_int_ = from.extr_int_;
  // @@protoc_insertion_point(copy_constructor:filequery.ReqFilequery)
}

inline void ReqFilequery::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tokenstr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tokenstr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extr_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extr_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extr_int_ = 0;
}

ReqFilequery::~ReqFilequery() {
  // @@protoc_insertion_point(destructor:filequery.ReqFilequery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqFilequery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
  tokenstr_.Destroy();
  extr_message_.Destroy();
}

void ReqFilequery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqFilequery::Clear() {
// @@protoc_insertion_point(message_clear_start:filequery.ReqFilequery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  tokenstr_.ClearToEmpty();
  extr_message_.ClearToEmpty();
  extr_int_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqFilequery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "filequery.ReqFilequery.username"));
        } else
          goto handle_unusual;
        continue;
      // string tokenstr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tokenstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "filequery.ReqFilequery.tokenstr"));
        } else
          goto handle_unusual;
        continue;
      // string extr_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extr_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "filequery.ReqFilequery.extr_message"));
        } else
          goto handle_unusual;
        continue;
      // int32 extr_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          extr_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqFilequery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filequery.ReqFilequery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filequery.ReqFilequery.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string tokenstr = 2;
  if (!this->_internal_tokenstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokenstr().data(), static_cast<int>(this->_internal_tokenstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filequery.ReqFilequery.tokenstr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tokenstr(), target);
  }

  // string extr_message = 3;
  if (!this->_internal_extr_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extr_message().data(), static_cast<int>(this->_internal_extr_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filequery.ReqFilequery.extr_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extr_message(), target);
  }

  // int32 extr_int = 4;
  if (this->_internal_extr_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_extr_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filequery.ReqFilequery)
  return target;
}

size_t ReqFilequery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filequery.ReqFilequery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string tokenstr = 2;
  if (!this->_internal_tokenstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokenstr());
  }

  // string extr_message = 3;
  if (!this->_internal_extr_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extr_message());
  }

  // int32 extr_int = 4;
  if (this->_internal_extr_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extr_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqFilequery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqFilequery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqFilequery::GetClassData() const { return &_class_data_; }

void ReqFilequery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqFilequery *>(to)->MergeFrom(
      static_cast<const ReqFilequery &>(from));
}


void ReqFilequery::MergeFrom(const ReqFilequery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filequery.ReqFilequery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_tokenstr().empty()) {
    _internal_set_tokenstr(from._internal_tokenstr());
  }
  if (!from._internal_extr_message().empty()) {
    _internal_set_extr_message(from._internal_extr_message());
  }
  if (from._internal_extr_int() != 0) {
    _internal_set_extr_int(from._internal_extr_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqFilequery::CopyFrom(const ReqFilequery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filequery.ReqFilequery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFilequery::IsInitialized() const {
  return true;
}

void ReqFilequery::InternalSwap(ReqFilequery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tokenstr_, lhs_arena,
      &other->tokenstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extr_message_, lhs_arena,
      &other->extr_message_, rhs_arena
  );
  swap(extr_int_, other->extr_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqFilequery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_filequery_2eproto_getter, &descriptor_table_filequery_2eproto_once,
      file_level_metadata_filequery_2eproto[0]);
}

// ===================================================================

class RespFilequery::_Internal {
 public:
};

RespFilequery::RespFilequery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:filequery.RespFilequery)
}
RespFilequery::RespFilequery(const RespFilequery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  extr_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extr_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extr_message().empty()) {
    extr_message_.Set(from._internal_extr_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:filequery.RespFilequery)
}

inline void RespFilequery::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extr_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extr_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

RespFilequery::~RespFilequery() {
  // @@protoc_insertion_point(destructor:filequery.RespFilequery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RespFilequery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
  extr_message_.Destroy();
}

void RespFilequery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespFilequery::Clear() {
// @@protoc_insertion_point(message_clear_start:filequery.RespFilequery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  extr_message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespFilequery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "filequery.RespFilequery.message"));
        } else
          goto handle_unusual;
        continue;
      // string extr_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extr_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "filequery.RespFilequery.extr_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespFilequery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filequery.RespFilequery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filequery.RespFilequery.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string extr_message = 3;
  if (!this->_internal_extr_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extr_message().data(), static_cast<int>(this->_internal_extr_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filequery.RespFilequery.extr_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extr_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filequery.RespFilequery)
  return target;
}

size_t RespFilequery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filequery.RespFilequery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string extr_message = 3;
  if (!this->_internal_extr_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extr_message());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespFilequery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespFilequery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespFilequery::GetClassData() const { return &_class_data_; }

void RespFilequery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespFilequery *>(to)->MergeFrom(
      static_cast<const RespFilequery &>(from));
}


void RespFilequery::MergeFrom(const RespFilequery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filequery.RespFilequery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_extr_message().empty()) {
    _internal_set_extr_message(from._internal_extr_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespFilequery::CopyFrom(const RespFilequery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filequery.RespFilequery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespFilequery::IsInitialized() const {
  return true;
}

void RespFilequery::InternalSwap(RespFilequery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extr_message_, lhs_arena,
      &other->extr_message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RespFilequery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_filequery_2eproto_getter, &descriptor_table_filequery_2eproto_once,
      file_level_metadata_filequery_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace filequery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::filequery::ReqFilequery*
Arena::CreateMaybeMessage< ::filequery::ReqFilequery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filequery::ReqFilequery >(arena);
}
template<> PROTOBUF_NOINLINE ::filequery::RespFilequery*
Arena::CreateMaybeMessage< ::filequery::RespFilequery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filequery::RespFilequery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
